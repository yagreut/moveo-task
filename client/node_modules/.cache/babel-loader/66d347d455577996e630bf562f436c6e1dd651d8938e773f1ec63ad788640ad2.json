{"ast":null,"code":"// These are filled with ranges (rangeFrom[i] up to but not including\n// rangeTo[i]) of code points that count as extending characters.\nlet rangeFrom = [],\n  rangeTo = [];\n(() => {\n  // Compressed representation of the Grapheme_Cluster_Break=Extend\n  // information from\n  // http://www.unicode.org/Public/16.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.\n  // Each pair of elements represents a range, as an offet from the\n  // previous range and a length. Numbers are in base-36, with the empty\n  // string being a shorthand for 1.\n  let numbers = \"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o\".split(\",\").map(s => s ? parseInt(s, 36) : 1);\n  for (let i = 0, n = 0; i < numbers.length; i++) (i % 2 ? rangeTo : rangeFrom).push(n = n + numbers[i]);\n})();\nexport function isExtendingChar(code) {\n  if (code < 768) return false;\n  for (let from = 0, to = rangeFrom.length;;) {\n    let mid = from + to >> 1;\n    if (code < rangeFrom[mid]) to = mid;else if (code >= rangeTo[mid]) from = mid + 1;else return true;\n    if (from == to) return false;\n  }\n}\nfunction isRegionalIndicator(code) {\n  return code >= 0x1F1E6 && code <= 0x1F1FF;\n}\nfunction check(code) {\n  for (let i = 0; i < rangeFrom.length; i++) {\n    if (rangeTo[i] > code) return rangeFrom[i] <= code;\n  }\n  return false;\n}\nconst ZWJ = 0x200d;\nexport function findClusterBreak(str, pos, forward = true, includeExtending = true) {\n  return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);\n}\nfunction nextClusterBreak(str, pos, includeExtending) {\n  if (pos == str.length) return pos;\n  // If pos is in the middle of a surrogate pair, move to its start\n  if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1))) pos--;\n  let prev = codePointAt(str, pos);\n  pos += codePointSize(prev);\n  while (pos < str.length) {\n    let next = codePointAt(str, pos);\n    if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {\n      pos += codePointSize(next);\n      prev = next;\n    } else if (isRegionalIndicator(next)) {\n      let countBefore = 0,\n        i = pos - 2;\n      while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {\n        countBefore++;\n        i -= 2;\n      }\n      if (countBefore % 2 == 0) break;else pos += 2;\n    } else {\n      break;\n    }\n  }\n  return pos;\n}\nfunction prevClusterBreak(str, pos, includeExtending) {\n  while (pos > 0) {\n    let found = nextClusterBreak(str, pos - 2, includeExtending);\n    if (found < pos) return found;\n    pos--;\n  }\n  return 0;\n}\nfunction codePointAt(str, pos) {\n  let code0 = str.charCodeAt(pos);\n  if (!surrogateHigh(code0) || pos + 1 == str.length) return code0;\n  let code1 = str.charCodeAt(pos + 1);\n  if (!surrogateLow(code1)) return code0;\n  return (code0 - 0xd800 << 10) + (code1 - 0xdc00) + 0x10000;\n}\nfunction surrogateLow(ch) {\n  return ch >= 0xDC00 && ch < 0xE000;\n}\nfunction surrogateHigh(ch) {\n  return ch >= 0xD800 && ch < 0xDC00;\n}\nfunction codePointSize(code) {\n  return code < 0x10000 ? 1 : 2;\n}","map":{"version":3,"names":["rangeFrom","rangeTo","numbers","split","map","s","parseInt","i","n","length","push","isExtendingChar","code","from","to","mid","isRegionalIndicator","check","ZWJ","findClusterBreak","str","pos","forward","includeExtending","nextClusterBreak","prevClusterBreak","surrogateLow","charCodeAt","surrogateHigh","prev","codePointAt","codePointSize","next","countBefore","found","code0","code1","ch"],"sources":["D:/user data/Documents/moveoTakeHomeAssignment/coding-app/client/node_modules/@marijn/find-cluster-break/src/index.js"],"sourcesContent":["// These are filled with ranges (rangeFrom[i] up to but not including\n// rangeTo[i]) of code points that count as extending characters.\nlet rangeFrom = [], rangeTo = []\n\n;(() => {\n  // Compressed representation of the Grapheme_Cluster_Break=Extend\n  // information from\n  // http://www.unicode.org/Public/16.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.\n  // Each pair of elements represents a range, as an offet from the\n  // previous range and a length. Numbers are in base-36, with the empty\n  // string being a shorthand for 1.\n  let numbers = \"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o\".split(\",\").map(s => s ? parseInt(s, 36) : 1)\n  for (let i = 0, n = 0; i < numbers.length; i++)\n    (i % 2 ? rangeTo : rangeFrom).push(n = n + numbers[i])\n})()\n\nexport function isExtendingChar(code) {\n  if (code < 768) return false\n  for (let from = 0, to = rangeFrom.length;;) {\n    let mid = (from + to) >> 1\n    if (code < rangeFrom[mid]) to = mid\n    else if (code >= rangeTo[mid]) from = mid + 1\n    else return true\n    if (from == to) return false\n  }\n}\n\nfunction isRegionalIndicator(code) {\n  return code >= 0x1F1E6 && code <= 0x1F1FF\n}\n\nfunction check(code) {\n  for (let i = 0; i < rangeFrom.length; i++) {\n    if (rangeTo[i] > code) return rangeFrom[i] <= code\n  }\n  return false\n}\n\nconst ZWJ = 0x200d\n\nexport function findClusterBreak(str, pos, forward = true, includeExtending = true) {\n  return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending)\n}\n\nfunction nextClusterBreak(str, pos, includeExtending) {\n  if (pos == str.length) return pos\n  // If pos is in the middle of a surrogate pair, move to its start\n  if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1))) pos--\n  let prev = codePointAt(str, pos)\n  pos += codePointSize(prev)\n  while (pos < str.length) {\n    let next = codePointAt(str, pos)\n    if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {\n      pos += codePointSize(next)\n      prev = next\n    } else if (isRegionalIndicator(next)) {\n      let countBefore = 0, i = pos - 2\n      while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) { countBefore++; i -= 2 }\n      if (countBefore % 2 == 0) break\n      else pos += 2\n    } else {\n      break\n    }\n  }\n  return pos\n}\n\nfunction prevClusterBreak(str, pos, includeExtending) {\n  while (pos > 0) {\n    let found = nextClusterBreak(str, pos - 2, includeExtending)\n    if (found < pos) return found\n    pos--\n  }\n  return 0\n}\n\nfunction codePointAt(str, pos) {\n  let code0 = str.charCodeAt(pos)\n  if (!surrogateHigh(code0) || pos + 1 == str.length) return code0\n  let code1 = str.charCodeAt(pos + 1)\n  if (!surrogateLow(code1)) return code0\n  return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000\n}\n\nfunction surrogateLow(ch) { return ch >= 0xDC00 && ch < 0xE000 }\nfunction surrogateHigh(ch) { return ch >= 0xD800 && ch < 0xDC00 }\nfunction codePointSize(code) { return code < 0x10000 ? 1 : 2 }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}